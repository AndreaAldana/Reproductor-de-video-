{"id":"ejercicios/generators.html","dependencies":[{"name":"C:\\Users\\Administrator\\Desktop\\practica de js a ts\\practica\\package.json","includedInParent":true,"mtime":1603306172244}],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Generators</title>\r\n</head>\r\n\r\n<body>\r\n    <a href=\"/ejercicios/\">Go back</a>\r\n    <p><em>Abre la consola</em></p>\r\n\r\n    <script>//Los generadores son funciones que se pueden sair y volver a entrar\n//su contexto será conservado entre las reentradas\n//cada vez que llamamos next, la ejecución del generador va a continuar hasta el próximo yield\nfunction* simpleGenerator() {\n  console.log(\"Generator start\");\n  yield 1;\n  yield 2;\n  yield 3;\n  console.log(\"generator end\");\n}\n\nconst gen = simpleGenerator(); //puede ser infinito\n\nfunction* idMaker() {\n  let id = 1;\n\n  while (true) {\n    yield id;\n    id = id + 1;\n  }\n} //Cuando llamamos next, también podemos pasar valoes que la función recibe\n\n\nfunction* idMakerWithReset() {\n  let id = 1;\n  let reset;\n\n  while (true) {\n    reset = yield id;\n\n    if (reset) {\n      id = 1;\n    } else {\n      id = id + 1;\n    }\n  }\n} //Ahora hagamos un ej mas complejo\n\n\nfunction* fibonacci() {\n  let a = 1;\n  let b = 1;\n\n  while (true) {\n    const nextNumber = a + b;\n    a = b;\n    b = nextNumber;\n    yield nextNumber;\n  }\n}</script>\r\n\r\n</body>\r\n\r\n</html>"},"sourceMaps":null,"error":null,"hash":"dc886fe70eb5970246bfac647ab19fa0","cacheData":{"env":{}}}