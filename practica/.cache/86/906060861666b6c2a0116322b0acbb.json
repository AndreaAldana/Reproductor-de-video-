{"id":"ejercicios/promises.html","dependencies":[{"name":"C:\\Users\\Administrator\\Desktop\\practica de js a ts\\practica\\package.json","includedInParent":true,"mtime":1603306172244}],"generated":{"html":"<html>\r\n\r\n<head>\r\n    <title>Promesas</title>\r\n</head>\r\n\r\n<body>\r\n    <a href=\"/ejercicios/\">Go back</a>\r\n\r\n    <ul>\r\n        <li><button id=\"sequence\">Get Top Movies in Sequence</button></li>\r\n        <li><button id=\"parallel\">Get Top Movies in Parallel</button></li>\r\n        <li><button id=\"fastest\">Get Fastest Top Movie</button></li>\r\n    </ul>\r\n\r\n    <ul id=\"movies\"></ul>\r\n\r\n    <script>// Ejemplo: renderMovies([{ title: \"Spider-Man\", release_date: \"2019-06-30\", poster_path: \"/rjbNpRMoVvqHmhmksbokcyCr7wn.jpg\" }])\n// Traducir las funciones de usar thens a usar async/await\n// Crear función para que no nos gastemos la cantidad de requests demasiado rapido\n// Crear función donde hacemos requests secuenciales\n// Crear función donde hacemos requests en paralelo\n// Crear función donde obtenemos el primer request que llegue\n// The Movie Database API: https://developers.themoviedb.org/3/getting-started/introduction\nconst apiKey = 'b89fc45c2067cbd33560270639722eae';\n\nasync function getMovie(id) {\n  const url = `https://api.themoviedb.org/3/movie/${id}?api_key=${apiKey}`;\n  const response = await fetch(url);\n  const data = await response.json();\n  return data;\n}\n\nasync function getPopularMovies() {\n  const url = `https://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&api_key=${apiKey}`;\n  const response = await fetch(url);\n  const data = await response.json();\n  return data.results;\n}\n\nasync function getTopMoviesIds(n = 3) {\n  /* return getPopularMovies().then(popularMovies =>\r\n      popularMovies.slice(0, n).map(movie => movie.id)\r\n  ); */\n\n  /* try{\r\n  const popularMovies = await getPopularMovies()\r\n  }\r\n  catch(error){\r\n  console.log(error.message)\r\n  } */\n  const popularMovies = await getPopularMovies();\n  const ids = popularMovies.slice(0, n).map(movie => movie.id);\n  return ids;\n}\n\nfunction renderMovies(movies) {\n  const movieList = document.getElementById('movies');\n  movieList.innerHTML = '';\n  movies.forEach(movie => {\n    const listItem = document.createElement('li');\n    listItem.innerHTML = `\n            <img src=\"https://image.tmdb.org/t/p/w342${movie.poster_path}\" />\n            <h5>${movie.title}</h5>\n            <p>Released on <em>${movie.release_date}</em></p>\n            `;\n    movieList.appendChild(listItem);\n  });\n}\n\nasync function getTopMoviesInSequence() {\n  //obtener lista de ids\n  const ids = await getTopMoviesIds(); //llenar lista de peliculas con loop\n\n  const movies = [];\n\n  for (const id of ids) {\n    //por cada id se añade a la lista\n    const movie = await getMovie(id);\n    movies.push(movie);\n  }\n\n  return movies;\n}\n\nasync function getTopMoviesInParallel() {\n  const ids = await getTopMoviesIds();\n  const moviePromises = ids.map(id => getMovie(id)); //all esperará a que todas las promesas se resuelvan\n  //Si una da error, todo dará error\n\n  const movies = await Promise.all(moviePromises);\n  return movies;\n}\n\nasync function getFastestTopMovie() {\n  const ids = await getTopMoviesIds(); //en esta función importa la primera promesa que se cumpla\n\n  const moviePromises = ids.map(id => getMovie(id));\n  const movie = await Promise.race(moviePromises);\n  return movie;\n}\n\ndocument.getElementById('sequence').onclick = async function () {\n  const movies = await getTopMoviesInSequence();\n  renderMovies(movies); //Este las mostrará una por una ordenadamente, una a una\n};\n\ndocument.getElementById('parallel').onclick = async function () {\n  const movies = await getTopMoviesInParallel();\n  renderMovies(movies); //Esto esperará a que todos los elementos carguen y ahí los va a mostrar\n  //de manera paralela\n};\n\ndocument.getElementById('fastest').onclick = async function () {\n  const movie = await getFastestTopMovie(); //la funcion render movies necesita un arreglo, es por ello que tiene un arreglo de uno\n\n  renderMovies([movie]); //Esto dará el primer dato que trae la promesas\n  //el primer dato no siempre será el mismo, todo depende del servidor de la api\n  //la red, etc...\n};</script>\r\n</body>\r\n\r\n</html>"},"sourceMaps":null,"error":null,"hash":"873ec60163a680d3787bd36f0a96acbe","cacheData":{"env":{}}}