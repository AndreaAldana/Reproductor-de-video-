{"id":"ejercicios/closures.html","dependencies":[{"name":"C:\\Users\\Administrator\\Desktop\\practica de js a ts\\practica\\package.json","includedInParent":true,"mtime":1603306172244}],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Closures</title>\r\n</head>\r\n\r\n<body>\r\n    <a href=\"/ejercicios/\">Go back</a>\r\n    <p><em>Abre la consola</em></p>\r\n\r\n    <script>//IIFE es una función que se llama inmediatamente\n(function () {\n  let color = 'green';\n\n  function printColor() {\n    console.log(color);\n  }\n\n  printColor();\n})(); //Funciones que retornan funciones, closure es acceder a una variable dentro \n//de una función, son variables privadas a las que las funciones dentro acceden.\n\n\nfunction makeColorPrinter(color) {\n  let colorMessage = `The color is ${color}`;\n  return function () {\n    console.log(colorMessage);\n  };\n}\n\nlet greenColorPrinter = makeColorPrinter(\"blue\"); //Si se imprime así, muestra el mensaje en consola\n\nconsole.log(greenColorPrinter()); //Si se imprime asi, en la consola retorna literalmente el codigo de la función\n\n/* console.log(greenColorPrinter) */\n//los closure permiten tener variables privadas. Permite el encapsulamiento.\n\nfunction makeCounter(n) {\n  let count = n;\n  return {\n    increase: function () {\n      count = count + 1;\n    },\n    decrease: function () {\n      count = count - 1;\n    },\n    getCount: function () {\n      return count;\n    }\n  };\n}\n\nlet counter = makeCounter(7);\nconsole.log(\"The count is: \" + counter.getCount());\ncounter.increase();\nconsole.log(\"The count is: \" + counter.getCount());\ncounter.decrease();\ncounter.decrease();\ncounter.decrease();\nconsole.log(\"The count is: \" + counter.getCount());</script>\r\n\r\n</body>\r\n\r\n</html>"},"sourceMaps":null,"error":null,"hash":"ccb70a7aa46d5b0f4d83e0d68ba44f56","cacheData":{"env":{}}}