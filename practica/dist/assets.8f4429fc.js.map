{"version":3,"sources":["assets/MediaPlayer.js","assets/plugins/AutoPlay.js","assets/plugins/AutoPause.js","assets/index.js"],"names":["MediaPlayer","config","media","el","plugins","_initPlugins","prototype","player","play","pause","video","muted","value","forEach","plugin","run","togglePlay","paused","mute","unmute","unmuteMute","AutoPlay","AutoPause","constructor","threshold","handleIntersection","bind","handleVisibilityChange","observer","IntersectionObserver","observe","document","addEventListener","entries","entry","isVisible","intersectionRatio","visibilityState","querySelector","button","onclick","navigator","serviceWorker","register","catch","error","console","log","message"],"mappings":";;AGAA;;AACA;;AACA;AHDA,AEDA,ADAA,MCAMsB,GDAGD,MCAT,CAAgB,CDAhB,GAAoB,CAAG,EAGvB;ADAA,AEFIE,EAAAA,OFEKvB,IEFM,GAAG,IFElB,CAAqBC,MAArB,EAA6B;AACzB,AEFI,OFECC,EEFIsB,GFET,GAAavB,GEFT,GFEe,AEFE,CFEDE,EAApB,CEFI;AFGJ,AGDJ,ADDQ,ADCRkB,ODCSjB,CCDD,CCDKqB,ADCJnB,KDCL,GAAeL,CCDnB,CAAmBc,GAAnB,CDCyB,CAACX,CCDD,ECDjB,GAA0B,CFEf,IAAkB,AEFEqB,ADCJlB,EDC/B,ICDqB,EAAkB,UCDT,CAAwBmB,IAAxB,CAA6B,IAA7B,CAA1B;ACER,ADDQ,ADCJ,MEAEhB,AFAE,CAACH,ECDIoB,ECCF,EFAI,CEADI,AFAEpB,KAAZ,EAAmB,CEAD,CAAC2B,QDDf,GAA8B,ECCxB,CAAuB,EDDMX,KCC7B,CAAd,gBDDsC,CAA4BD,IAA5B,CAAiC,IAAjC,CAA9B;AFGJ,AGDJ,ADDK,ADCGnB,IAAAA,EEAFgC,CHCGlC,GCDK,CAACM,CEAH,GAAGoB,CFAP,GDCJ,ACDmB,IEAA,AFAf,CEAgBO,aAAT,CAAuB,QAAvB,CAAf;AHEC,AGDD,AFAK,EDGL,IGHMlB,UAAU,GAAGW,QAAQ,CAACO,aAAT,CAAuB,aAAvB,CAAnB;AAEA,ADHIvB,EAAAA,GAAG,CCGDR,ADHEA,MCGI,ADHL,EAAS,CCGD,IAAIP,oBAAJ,CAAgB;AAC7BG,ADHM,ADEJI,EECFJ,AFDEI,EECA,EAAEG,EFDI,CAACF,EEAoB,EFA3B;ADEJR,AGDaI,ADFL,ADEP,CAND,CEMaA,OAAO,ADFPG,EFGF,AGDW,CHCVD,AGAR,GDHI,CCGAe,EDHcd,GFGtB,CAAsBF,EEHd,CAFQ,CAGR,OCEJ,CHAJ,CGDsB,EHCe,AGAjB,IAAIiB,QHAyB,UGA7B,EADE;AHElB,AGH2B,ADCvB,CCDO,CAAf,MHGUf,MAAM,GAAG;AACXC,IAAAA,IAAI,EAAE,KCFCa,CDEK,KAAKb,IAAL,EADD;AAEXC,AGAR8B,ADHQ,IFGA9B,EGAF,CAAC+B,EHAM,CEHCZ,CFGC,GGAf,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","file":"assets.8f4429fc.js","sourceRoot":"..","sourcesContent":["\r\n// Creamos una función llamada mediaPlayer que nos servirá como prototipo.\r\n\r\nfunction MediaPlayer(config) {\r\n    this.media = config.el;\r\n    this.plugins = config.plugins || [];\r\n\r\n    this._initPlugins();\r\n}\r\n\r\n//this indica llamar a mediaplayer\r\nMediaPlayer.prototype._initPlugins = function () {\r\n    const player = {\r\n        play: () => this.play(),\r\n        pause: () => this.pause(),\r\n        media: this.video,\r\n        get muted() {\r\n            return this.media.muted;\r\n        },\r\n        set muted(value) {\r\n            if (value == true) {\r\n                this.media.muted = value\r\n            }\r\n        }\r\n    }\r\n    this.plugins.forEach(plugin => {\r\n        plugin.run(this);\r\n    })\r\n}\r\n\r\n/*  A mediaPlayer le asignamos una función llamada play usando prototype.\r\n Esta función le dará inicio al video. */\r\n//Si está pausado, puede darse play, si está en play, puede pausarse con click.\r\n\r\nMediaPlayer.prototype.play = function () {\r\n    this.media.play();\r\n}\r\n\r\nMediaPlayer.prototype.pause = function () {\r\n    this.media.pause();\r\n}\r\n\r\nMediaPlayer.prototype.togglePlay = function () {\r\n    if (this.media.paused) {\r\n        this.play();\r\n    } else {\r\n        this.pause();\r\n    }\r\n}\r\n\r\nMediaPlayer.prototype.mute = function () {\r\n    this.media.muted = true;\r\n}\r\n\r\nMediaPlayer.prototype.unmute = function () {\r\n    this.media.muted = false;\r\n}\r\n\r\nMediaPlayer.prototype.unmuteMute = function () {\r\n    if (this.media.muted == true) {\r\n        this.unmute();\r\n    } else {\r\n        this.mute();\r\n    }\r\n}\r\n\r\n/*    Luego con el botón se acciona una función llamada player que es una instancia del prototipo mediaPlayer que creamos.\r\nLa instancia se crea usando la palabra new. */\r\n\r\nexport default MediaPlayer;\r\n\r\n//Se debe exportar para poder usarse","function AutoPlay() { }\r\n\r\n\r\n//aquí se llama una instancia de mediaplayer\r\nAutoPlay.prototype.run = function (player) {\r\n    if (!player.muted) {\r\n        player.muted = true;\r\n    }\r\n\r\n    player.play();\r\n}\r\nexport default AutoPlay;","class AutoPause {\r\n    constructor() {\r\n        this.threshold = 0.25;\r\n        this.handleIntersection = this.handleIntersection.bind(this)\r\n        this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\r\n    }\r\n    run(player) {\r\n        //Llamamos a la instancia de la clase\r\n        this.player = player;\r\n        //Creamos el intersection observer\r\n        //Primero recibe un handler y el segundo es ub objeto de configuración\r\n        const observer = new IntersectionObserver(this.handleIntersection, {\r\n            //Esto define qué percibirá del elemento, en este caso, 25% de elemento que sobre\r\n            threshold: this.threshold\r\n        });\r\n        //Lo que va a observar, que en este caso es el video\r\n        observer.observe(this.player.media)\r\n\r\n        //Este evento detiene algo si no está siendo visto, en este caso\r\n        //si sales de la pestaña del video, el se detendrá\r\n        //Esto es muy util para también detener info o carruseles que el usuario no esté viendo\r\n        //o incluso desactivar sonidos si se apaga la pantalla en descanso\r\n        document.addEventListener(\"visibilitychange\", this.handleVisibilityChange)\r\n    }\r\n\r\n    //Aquí hay que pasar una lista de entries, son todos los objetos que se están observando\r\n    handleIntersection(entries) {\r\n        //Le indicamos que es un solo elemento de la lista\r\n        const entry = entries[0];\r\n        const isVisible = entry.intersectionRatio >= this.threshold\r\n\r\n        if (isVisible) {\r\n            this.player.play();\r\n        } else {\r\n            this.player.pause();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //Aquí la función que recibe, el cual es un boolean en el que si es true hace algo, y si es false,\r\n    //la idea es detenerlo, visibility sabrá cuando detenerlo\r\n    handleVisibilityChange() {\r\n        const isVisible = document.visibilityState == \"visible\"\r\n        if (isVisible) {\r\n            this.player.play();\r\n        } else {\r\n            this.player.pause()\r\n        }\r\n\r\n    }\r\n\r\n}\r\nexport default AutoPause;","import MediaPlayer from './MediaPlayer.js'\r\nimport AutoPlay from './plugins/AutoPlay.js'\r\nimport AutoPause from './plugins/AutoPause.js'\r\n\r\n//Aquí, se debe importar el archivo media player para que funcione\r\nconst video = document.querySelector(\"video\");\r\nconst button = document.querySelector(\"button\");\r\nconst unmuteMute = document.querySelector('#unmuteMute')\r\n\r\nconst player = new MediaPlayer({\r\n  el: video, plugins: [\r\n    new AutoPlay(), new AutoPause()]\r\n});\r\n\r\nbutton.onclick = () => player.togglePlay();\r\nunmuteMute.onclick = () => player.unmuteMute();\r\n\r\nif ('serviceWorker' in navigator) {\r\n  navigator.serviceWorker.register('/sw.js').catch(error => {\r\n    console.log(error.message)\r\n  })\r\n}"]}