{"version":3,"sources":["ejercicios/decorator/index.ts"],"names":[],"mappings":"AAAA,IAAA,KAAA;AAAA;AAAA,YAAA;AAII,WAAA,KAAA,CAAY,KAAZ,EAAmC;AAAnC,QAAA,KAAA,GAAA,IAAA;;AACI,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,MAAL,GAAc,EAAd;AAEA,QAAI,YAAY,GAAG,QAAQ,CAAC,aAAT,CAAuB,GAAvB,CAAnB;AACA,IAAA,YAAY,CAAC,SAAb,GAAyB,aAAzB,CAL+B,CAO/B;;AACA,SAAK,KAAL,CAAW,UAAX,CAAsB,YAAtB,CAAmC,YAAnC,EAAiD,KAAK,KAAL,CAAW,WAA5D,EAR+B,CAW/B;;AACA,SAAK,KAAL,CAAW,gBAAX,CAA4B,OAA5B,EAAqC,YAAA;AACjC,MAAA,KAAI,CAAC,MAAL,GAAc,EAAd,CADiC,CAEjC;;AACA,MAAA,KAAI,CAAC,QAAL;;AACA,MAAA,YAAY,CAAC,SAAb,GAAyB,KAAI,CAAC,MAAL,CAAY,CAAZ,KAAkB,EAA3C;AACH,KALD;AAMH;;AACD,EAAA,KAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA,CAAc,CAAd;;AACJ,SAAA,KAAA;AAxBA,CAAA,EAAA;;AA0BA,SAAS,sBAAT,CAAgC,KAAhC,EAA4C;AACxC,MAAI,QAAQ,GAAG,KAAK,CAAC,QAArB;;AACA,EAAA,KAAK,CAAC,QAAN,GAAiB,YAAA;AACb,IAAA,QAAQ;AACR,QAAI,KAAK,GAAG,KAAK,CAAC,KAAN,CAAY,KAAxB;;AACA,QAAI,CAAC,KAAL,EAAY;AACR,MAAA,KAAK,CAAC,MAAN,CAAa,IAAb,CAAkB,WAAlB;AACH;AAEJ,GAPD;;AAQA,SAAO,KAAP;AACH;;AAGD,SAAS,mBAAT,CAA6B,KAA7B,EAAyC;AACrC,MAAI,QAAQ,GAAG,KAAK,CAAC,QAArB;;AACA,EAAA,KAAK,CAAC,QAAN,GAAiB,YAAA;AACb,IAAA,QAAQ;AACR,QAAI,KAAK,GAAG,KAAK,CAAC,KAAN,CAAY,KAAxB,CAFa,CAGb;;AACA,QAAI,CAAC,CAAC,KAAK,CAAC,OAAN,CAAc,GAAd,CAAN,EAA0B;AACtB,MAAA,KAAK,CAAC,MAAN,CAAa,IAAb,CAAkB,mBAAlB;AACH;AAEJ,GARD;;AASA,SAAO,KAAP;AACH;;AAED,IAAI,KAAK,GAAG,IAAI,KAAJ,CAAU,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAV,CAAZ;AACA,KAAK,GAAG,sBAAsB,CAAC,KAAD,CAA9B;AACA,KAAK,GAAG,mBAAmB,CAAC,KAAD,CAA3B","file":"decorator.df4bca80.js","sourceRoot":"..","sourcesContent":["class Field {\r\n    errors: string[]\r\n    input: HTMLInputElement\r\n\r\n    constructor(input: HTMLInputElement) {\r\n        this.input = input\r\n        this.errors = []\r\n\r\n        let errorMessage = document.createElement('p')\r\n        errorMessage.className = 'text-danger'\r\n\r\n        //Esto es para insertar el p \r\n        this.input.parentNode.insertBefore(errorMessage, this.input.nextSibling)\r\n\r\n\r\n        //La validacion solo ocurre al cambiar el valor del campo\r\n        this.input.addEventListener('input', () => {\r\n            this.errors = []\r\n            //Valida y pusea si hay error\r\n            this.validate()\r\n            errorMessage.innerText = this.errors[0] || ''\r\n        })\r\n    }\r\n    validate() { }\r\n}\r\n\r\nfunction RequiredFieldDecorator(field: Field): Field {\r\n    let validate = field.validate;\r\n    field.validate = function () {\r\n        validate()\r\n        let value = field.input.value;\r\n        if (!value) {\r\n            field.errors.push(\"Requerido\")\r\n        }\r\n\r\n    }\r\n    return field\r\n}\r\n\r\n\r\nfunction EmailFieldDecorator(field: Field): Field {\r\n    let validate = field.validate;\r\n    field.validate = function () {\r\n        validate()\r\n        let value = field.input.value;\r\n        //el guion significa que el value no sea -1, esto quiere decir, que no exista\r\n        if (!~value.indexOf('@')) {\r\n            field.errors.push(\"Debe ser un email\")\r\n        }\r\n\r\n    }\r\n    return field\r\n}\r\n\r\nlet field = new Field(document.querySelector('#email'))\r\nfield = RequiredFieldDecorator(field)\r\nfield = EmailFieldDecorator(field)"]}