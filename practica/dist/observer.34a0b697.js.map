{"version":3,"sources":["ejercicios/observer/index.ts"],"names":[],"mappings":"AAAA;AAWA,IAAA,YAAA;AAAA;AAAA,YAAA;AAII,WAAA,YAAA,GAAA;AAAA,QAAA,KAAA,GAAA,IAAA,CAAA,CAHA;;;AACA,SAAA,SAAA,GAAwB,EAAxB;AAGI,QAAM,EAAE,GAAqB,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAA7B;AACA,IAAA,EAAE,CAAC,gBAAH,CAAoB,OAApB,EAA6B,YAAA;AACzB;AACA,MAAA,KAAI,CAAC,MAAL,CAAY,EAAE,CAAC,KAAf;AACH,KAHD;AAKH,GAXL,CAcI;;;AACA,EAAA,YAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,QAAV,EAA4B;AACxB,SAAK,SAAL,CAAe,IAAf,CAAoB,QAApB;AACH,GAFD;;AAIA,EAAA,YAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,QAAZ,EAA8B;AAC1B;AACA,QAAM,KAAK,GAAG,KAAK,SAAL,CAAe,SAAf,CAAyB,UAAA,GAAA,EAAG;AACtC,aAAO,GAAG,IAAI,QAAd;AACH,KAFa,CAAd,CAF0B,CAK1B;;AACA,SAAK,SAAL,CAAe,MAAf,CAAsB,KAAtB,EAA6B,CAA7B;AACH,GAPD,CAnBJ,CA4BI;;;AACA,EAAA,YAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,IAAP,EAAgB;AACZ,SAAK,SAAL,CAAe,OAAf,CAAuB,UAAA,QAAA,EAAQ;AAAI,aAAA,QAAQ,CAAC,MAAT,CAAgB,IAAhB,CAAA;AAAqB,KAAxD;AACH,GAFD;;AAGJ,SAAA,YAAA;AAhCA,CAAA,EAAA;;AAkCA,IAAA,YAAA;AAAA;AAAA,YAAA;AAEI,WAAA,YAAA,GAAA;AACI,SAAK,EAAL,GAAU,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAV;AACH;;AACD,EAAA,YAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,IAAP,EAAgB;AACZ,SAAK,EAAL,CAAQ,SAAR,GAAoB,IAApB;AACH,GAFD;;AAGJ,SAAA,YAAA;AARA,CAAA,EAAA;;AAUA,IAAM,KAAK,GAAG,IAAI,YAAJ,EAAd;AACA,IAAM,OAAO,GAAG,IAAI,YAAJ,EAAhB;AACA,KAAK,CAAC,SAAN,CAAgB,OAAhB;AAEA,UAAU,CACN,YAAA;AAAM,SAAA,KAAK,CAAC,WAAN,CAAkB,OAAlB,CAAA;AAA0B,CAD1B,EAEN,IAFM,CAAV","file":"observer.34a0b697.js","sourceRoot":"..","sourcesContent":["//Primero definimos unas interfaces\r\n\r\ninterface Observer {\r\n    update: (data: any) => void\r\n}\r\n\r\ninterface Subject {\r\n    subscribe: (observer: Observer) => void\r\n    unsubscribe: (observer: Observer) => void\r\n}\r\n\r\nclass BitcoinPrice implements Subject {\r\n    //Se define la lista\r\n    observers: Observer[] = [];\r\n\r\n    constructor() {\r\n        const el: HTMLInputElement = document.querySelector(\"#value\");\r\n        el.addEventListener('input', () => {\r\n            //El notificará cuando el valor cambie\r\n            this.notify(el.value)\r\n        })\r\n\r\n    }\r\n\r\n\r\n    //se añade a una lista de observadores\r\n    subscribe(observer: Observer) {\r\n        this.observers.push(observer)\r\n    }\r\n\r\n    unsubscribe(observer: Observer) {\r\n        //para sacarlo debemos saber en que indice se encuentra\r\n        const index = this.observers.findIndex(obs => {\r\n            return obs == observer;\r\n        })\r\n        //de ese indice solo queremos sacar 1 elemento\r\n        this.observers.splice(index, 1)\r\n    }\r\n\r\n    //Esto notificará a los subscriptores\r\n    notify(data: any) {\r\n        this.observers.forEach(observer => observer.update(data))\r\n    }\r\n}\r\n\r\nclass PriceDisplay implements Observer {\r\n    private el: HTMLElement;\r\n    constructor() {\r\n        this.el = document.querySelector(\"#price\")\r\n    }\r\n    update(data: any) {\r\n        this.el.innerText = data;\r\n    }\r\n}\r\n\r\nconst value = new BitcoinPrice()\r\nconst display = new PriceDisplay();\r\nvalue.subscribe(display);\r\n\r\nsetTimeout(\r\n    () => value.unsubscribe(display),\r\n    5000\r\n)\r\n"]}